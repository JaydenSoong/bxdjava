泛型：
     在 JDK1.4 版本以前，集合容器什么类型的对象都可以存储。但是在取出时，或需要用到对象的特有内容时，需要向下转型。
     由于对象的类型可能不一致，导致向下转型时发生 ClassCastException 异常。
     为了避免这个问题，只能从主观上控制——往集合中存储的对象类型保持一致。

     JDK1.5 以后解决了这个问题。在定义集合时，就直接明确集合中存储元素的具体类型。
     这样，编译器在编译时，就可以对集合中存储的元素类型进行检查。
     一旦发现类型不匹配，就编译失败。这个技术就是泛型技术。

好处：
     1.将运行时期的问题转移到了编译时期，可以更好的让程序员发现问题并解决问题。
     2.避免了向下转型的麻烦。

总结：
     泛型就是应用在编译时期的一项安全机制。

泛型擦除：
     编译器通过泛型对元素进行检查，只要检查通过，就会生成 Class 就文件，但在 Class 文件中，就将泛型标识去掉了。

泛型表现：
     泛型技术在集合框架中应用范围很大。
     什么时候写泛型呢？
     1.只要看到类或接口在描述时右边定义 <>，就需要泛型。其实是容器在不明确操作元素的类型的情况下，对外提供了一个参数 <>。
       使用容器时，只要具体的类型实参传递给参数即可。

